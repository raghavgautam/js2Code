#macro(sepMaybe $index $size)
#set ( $lastone = $size - 1 )
#if( $index <= $lastone ),
                          #end
#end
#set($mymap = {"String" : "str" , "Int" : "int", "Double": "float", "Boolean": "bool", "Unknown": "str"})
#macro(getFieldType $ftype)$mymap.getOrDefault("${ftype}", "${ftype}")#end

class $class.name()(object):
    """$class.name()"""
    data = None
    expected_data_keys = [#foreach( $field in $class.getFields())'$field.origName()'#sepMaybe($velocityCount, $class.getFields().size())#end]

    def check_data(self, data):
        """
        Check the initialized data.
        :param data: data to be checked
        """
        expected_keys = set(self.expected_data_keys)
        actual_keys = set(data.keys())
        if expected_keys == actual_keys:
            return
        import logging
        logger = logging.getLogger(__name__)
        if len(actual_keys - expected_keys) > 0:
            logger.warning("actual_keys - expected_keys = %s", (actual_keys - expected_keys))
        if len(expected_keys - actual_keys) > 0:
            logger.warning("expected_keys - actual_keys = %s", (expected_keys - actual_keys))

    def __init__(self, data):
        """
        Initialize this class with dictionary or json.
        :param data: data must be a json string or a dictionary
        :return:
        """
        if isinstance(data, str):
            import json
            self.data = json.loads(data)
        else:
            self.data = data
        self.check_data(self.data)

    def get_data_dictionary(self):
        return self.data

    def __str__(self):
        return "$class.name()(%s)" % str(self.data)

    def __repr__(self):
        return self.__str__()
#foreach( $field in $class.getFields())

    def get_$field.origName().toString().replace(".", "_").replace("-", "_").replace(":", "_").replaceAll("(.)([A-Z]+)", "$1_$2").toLowerCase()(self):
        """
        Get value for the key: $field.origName()
        """
#set ($ftype = "#getFieldType($field.type())")
#set ($fname = $field.origName())
#if($field.arr)
        return [$ftype(x) for x in self.data['$fname']]
#else
        return $ftype(self.data['$fname'])
#end
#end